// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: libvirt.proto

package libvirt

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	Servers              map[string]*Server `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PollingInterval      string             `protobuf:"bytes,2,opt,name=polling_interval,json=pollingInterval,proto3" json:"polling_interval,omitempty"`
	NameUrl              string             `protobuf:"bytes,3,opt,name=name_url,json=nameUrl,proto3" json:"name_url,omitempty"`
	ServerUrl            string             `protobuf:"bytes,4,opt,name=server_url,json=serverUrl,proto3" json:"server_url,omitempty"`
	UuidUrl              string             `protobuf:"bytes,5,opt,name=uuid_url,json=uuidUrl,proto3" json:"uuid_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4b4ab4d75e205f, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetServers() map[string]*Server {
	if m != nil {
		return m.Servers
	}
	return nil
}

func (m *Config) GetPollingInterval() string {
	if m != nil {
		return m.PollingInterval
	}
	return ""
}

func (m *Config) GetNameUrl() string {
	if m != nil {
		return m.NameUrl
	}
	return ""
}

func (m *Config) GetServerUrl() string {
	if m != nil {
		return m.ServerUrl
	}
	return ""
}

func (m *Config) GetUuidUrl() string {
	if m != nil {
		return m.UuidUrl
	}
	return ""
}

func (*Config) XXX_MessageName() string {
	return "LibVirt.Config"
}

type Server struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int32    `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	TlsKey               string   `protobuf:"bytes,4,opt,name=tlsKey,proto3" json:"tlsKey,omitempty"`
	TlsCert              string   `protobuf:"bytes,5,opt,name=tlsCert,proto3" json:"tlsCert,omitempty"`
	TlsCACert            string   `protobuf:"bytes,6,opt,name=tlsCACert,proto3" json:"tlsCACert,omitempty"`
	SocketPath           string   `protobuf:"bytes,7,opt,name=socketPath,proto3" json:"socketPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Server) Reset()         { *m = Server{} }
func (m *Server) String() string { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()    {}
func (*Server) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e4b4ab4d75e205f, []int{1}
}
func (m *Server) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Server) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Server.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Server) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Server.Merge(m, src)
}
func (m *Server) XXX_Size() int {
	return m.Size()
}
func (m *Server) XXX_DiscardUnknown() {
	xxx_messageInfo_Server.DiscardUnknown(m)
}

var xxx_messageInfo_Server proto.InternalMessageInfo

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Server) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Server) GetTlsKey() string {
	if m != nil {
		return m.TlsKey
	}
	return ""
}

func (m *Server) GetTlsCert() string {
	if m != nil {
		return m.TlsCert
	}
	return ""
}

func (m *Server) GetTlsCACert() string {
	if m != nil {
		return m.TlsCACert
	}
	return ""
}

func (m *Server) GetSocketPath() string {
	if m != nil {
		return m.SocketPath
	}
	return ""
}

func (*Server) XXX_MessageName() string {
	return "LibVirt.Server"
}
func init() {
	proto.RegisterType((*Config)(nil), "LibVirt.Config")
	golang_proto.RegisterType((*Config)(nil), "LibVirt.Config")
	proto.RegisterMapType((map[string]*Server)(nil), "LibVirt.Config.ServersEntry")
	golang_proto.RegisterMapType((map[string]*Server)(nil), "LibVirt.Config.ServersEntry")
	proto.RegisterType((*Server)(nil), "LibVirt.Server")
	golang_proto.RegisterType((*Server)(nil), "LibVirt.Server")
}

func init() { proto.RegisterFile("libvirt.proto", fileDescriptor_8e4b4ab4d75e205f) }
func init() { golang_proto.RegisterFile("libvirt.proto", fileDescriptor_8e4b4ab4d75e205f) }

var fileDescriptor_8e4b4ab4d75e205f = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0x4f, 0xee, 0xd2, 0x40,
	0x14, 0xce, 0x94, 0x1f, 0x2d, 0x7d, 0xa8, 0x90, 0x59, 0x98, 0x42, 0xb0, 0x12, 0x12, 0x13, 0x5c,
	0x58, 0x12, 0x4c, 0x8c, 0xd1, 0x95, 0x12, 0x17, 0x06, 0x17, 0xa6, 0x06, 0x17, 0x6e, 0x48, 0x8b,
	0x43, 0x99, 0x30, 0x74, 0x9a, 0xe9, 0xb4, 0x09, 0x87, 0xf0, 0x2e, 0x1e, 0xc1, 0x25, 0x4b, 0x8f,
	0x60, 0xe0, 0x22, 0xa6, 0x6f, 0x06, 0xc2, 0xee, 0xfb, 0xf7, 0x5e, 0xde, 0x97, 0x19, 0x78, 0x2c,
	0x78, 0x5a, 0x73, 0xa5, 0xa3, 0x42, 0x49, 0x2d, 0xa9, 0xf7, 0x85, 0xa7, 0xdf, 0xb9, 0xd2, 0xc3,
	0x57, 0x19, 0xd7, 0xbb, 0x2a, 0x8d, 0x36, 0xf2, 0x30, 0xcb, 0x64, 0x26, 0x67, 0xe8, 0xa7, 0xd5,
	0x16, 0x19, 0x12, 0x44, 0x66, 0x6e, 0xf2, 0xcb, 0x01, 0x77, 0x21, 0xf3, 0x2d, 0xcf, 0xe8, 0x1b,
	0xf0, 0x4a, 0xa6, 0x6a, 0xa6, 0xca, 0x80, 0x8c, 0x5b, 0xd3, 0xee, 0x7c, 0x14, 0xd9, 0xa5, 0x91,
	0x49, 0x44, 0xdf, 0x8c, 0xfd, 0x29, 0xd7, 0xea, 0x18, 0x5f, 0xc3, 0xf4, 0x25, 0xf4, 0x0b, 0x29,
	0x04, 0xcf, 0xb3, 0x35, 0xcf, 0x35, 0x53, 0x75, 0x22, 0x02, 0x67, 0x4c, 0xa6, 0x7e, 0xdc, 0xb3,
	0xfa, 0x67, 0x2b, 0xd3, 0x01, 0x74, 0xf2, 0xe4, 0xc0, 0xd6, 0x95, 0x12, 0x41, 0x0b, 0x23, 0x5e,
	0xc3, 0x57, 0x4a, 0xd0, 0x67, 0x00, 0x66, 0x21, 0x9a, 0x0f, 0x68, 0xfa, 0x46, 0x69, 0xec, 0x01,
	0x74, 0xaa, 0x8a, 0xff, 0x44, 0xb3, 0x6d, 0x26, 0x1b, 0xbe, 0x52, 0x62, 0xb8, 0x84, 0x47, 0xf7,
	0x87, 0xd1, 0x3e, 0xb4, 0xf6, 0xec, 0x18, 0x10, 0x4c, 0x35, 0x90, 0xbe, 0x80, 0x76, 0x9d, 0x88,
	0x8a, 0xe1, 0x59, 0xdd, 0x79, 0xef, 0xd6, 0xcb, 0xcc, 0xc5, 0xc6, 0x7d, 0xe7, 0xbc, 0x25, 0x93,
	0xdf, 0x04, 0x5c, 0xa3, 0x52, 0x0a, 0x0f, 0xcd, 0x71, 0x76, 0x11, 0x62, 0xfa, 0x04, 0x1c, 0x5e,
	0xd8, 0x76, 0x0e, 0x2f, 0x9a, 0x4c, 0x21, 0x95, 0xc6, 0x32, 0xed, 0x18, 0x31, 0x7d, 0x0a, 0xae,
	0x16, 0xe5, 0x92, 0x1d, 0x6d, 0x0b, 0xcb, 0x68, 0x00, 0x9e, 0x16, 0xe5, 0x82, 0x29, 0x7d, 0x6d,
	0x60, 0x29, 0x1d, 0x81, 0xdf, 0xc0, 0x0f, 0xe8, 0xb9, 0xa6, 0xfa, 0x4d, 0xa0, 0x21, 0x40, 0x29,
	0x37, 0x7b, 0xa6, 0xbf, 0x26, 0x7a, 0x17, 0x78, 0x68, 0xdf, 0x29, 0x1f, 0x9f, 0x9f, 0xce, 0x21,
	0xf9, 0x7b, 0x0e, 0xc9, 0xbf, 0x73, 0x48, 0xfe, 0x5c, 0x42, 0x72, 0xba, 0x84, 0xe4, 0x87, 0x1f,
	0xbd, 0xb7, 0x3f, 0x24, 0x75, 0xf1, 0xa9, 0x5f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x14, 0xa1,
	0x5d, 0xc7, 0x33, 0x02, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UuidUrl) > 0 {
		i -= len(m.UuidUrl)
		copy(dAtA[i:], m.UuidUrl)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.UuidUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerUrl) > 0 {
		i -= len(m.ServerUrl)
		copy(dAtA[i:], m.ServerUrl)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.ServerUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NameUrl) > 0 {
		i -= len(m.NameUrl)
		copy(dAtA[i:], m.NameUrl)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.NameUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PollingInterval) > 0 {
		i -= len(m.PollingInterval)
		copy(dAtA[i:], m.PollingInterval)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.PollingInterval)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Servers) > 0 {
		for k := range m.Servers {
			v := m.Servers[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintLibvirt(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintLibvirt(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintLibvirt(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Server) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Server) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Server) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SocketPath) > 0 {
		i -= len(m.SocketPath)
		copy(dAtA[i:], m.SocketPath)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.SocketPath)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TlsCACert) > 0 {
		i -= len(m.TlsCACert)
		copy(dAtA[i:], m.TlsCACert)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.TlsCACert)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TlsCert) > 0 {
		i -= len(m.TlsCert)
		copy(dAtA[i:], m.TlsCert)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.TlsCert)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TlsKey) > 0 {
		i -= len(m.TlsKey)
		copy(dAtA[i:], m.TlsKey)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.TlsKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintLibvirt(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLibvirt(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLibvirt(dAtA []byte, offset int, v uint64) int {
	offset -= sovLibvirt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for k, v := range m.Servers {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLibvirt(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovLibvirt(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovLibvirt(uint64(mapEntrySize))
		}
	}
	l = len(m.PollingInterval)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.NameUrl)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.ServerUrl)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.UuidUrl)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Server) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovLibvirt(uint64(m.Port))
	}
	l = len(m.TlsKey)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.TlsCert)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.TlsCACert)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	l = len(m.SocketPath)
	if l > 0 {
		n += 1 + l + sovLibvirt(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLibvirt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLibvirt(x uint64) (n int) {
	return sovLibvirt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibvirt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Servers == nil {
				m.Servers = make(map[string]*Server)
			}
			var mapkey string
			var mapvalue *Server
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLibvirt
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLibvirt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthLibvirt
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthLibvirt
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLibvirt
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLibvirt
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthLibvirt
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Server{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLibvirt(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthLibvirt
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Servers[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NameUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UuidUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UuidUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibvirt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibvirt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Server) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLibvirt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Server: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Server: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsCACert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TlsCACert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocketPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLibvirt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLibvirt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocketPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLibvirt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLibvirt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLibvirt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLibvirt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLibvirt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLibvirt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLibvirt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLibvirt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLibvirt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLibvirt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLibvirt = fmt.Errorf("proto: unexpected end of group")
)
